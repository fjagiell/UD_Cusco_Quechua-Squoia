rule mergens {
  pattern {
    V [xpos=Root];
    NS [upos=NS];
    V -[ns]-> NS;
  }

  commands {
    V.form = V.form + NS.form;
    V.VerbForm = NS.VerbForm;

    shift NS ==> V;
    del_node NS;
  }
}
 
rule cas { 
  pattern {
    Root [xpos=Root];
    C [upos=Cas];
    C -[s.arg]-> Root;
  }
  commands{
    Root.form = Root.form + C.form;
    Root.Case = C.Case;
    
    shift C ==> Root;
    del_node C;
  }
}

rule case_cleanup {
  pattern {
    Root [xpos=Root];
    C [upos=Cas];
    C -[s.co|s.arg]-> Root;
  }
  commands{
    C.upos = ADP;
  }
}

rule suffix {
  pattern { 
    Root [xpos=Root];
    Suffix [xpos=SUFFIX];
    Root -[s.poss.subj|poss.subj|s.subj]-> Suffix;
  }
  commands{
    Root.form = Root.form + Suffix.form;
    
    shift Suffix ==> Root;
    del_node Suffix;
  }
}


rule vderiv {
  pattern{
    Root [xpos=Root];
    Vderiv [xpos=VDeriv];
    Root -> Vderiv;
  }
  commands{
    Root.form = Root.form + Vderiv.form;
    shift Vderiv ==> Root;
    del_node Vderiv;
  }
}
strat main { Seq (Onf(mergens), Onf(suffix), Onf(cas), Onf(case_cleanup), Onf(vderiv)) }
